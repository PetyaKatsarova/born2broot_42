
********* APPARMOR **********

security framework in Debian.n additional layer of security
 to the operating system by defining and enforcing policies
 that restrict the actions that processes can take, thereby
 reducing the risk of security vulnerabilities being exploited.


/usr/sbin/aa-status //or
sudo systemctl status apparmor

Head -n 2 /etc/os-release

************** SELINUX ***************

SELinux (Security-Enhanced Linux) is a mandatory access control mechanism implemented in the Linux kernel that provides an additional layer of security to the operating system. It enforces a system-wide security policy that restricts the actions that processes and users can perform, based on their roles, permissions, and labels.


****** CREATE USER/ADD TO GR ******

sudo adduser new_username
sudo groupadd groupname
sudo usermod -aG groupname username
getent group
cut -d: -f1 /etc/passwd //check all local users
getent group user42
groups //check groups of curr user

!! SWITCH TO DIFFERENT ACCOUNT:
Su other_user //enter passed

********* PASSWORD RULES **********

Sudo chage -l username // check passwd rules r working
sudo passwd myusername // change passwd
Sudo
sudo vim /etc/login.defs // for expiry time

******* SUDOERS AND SUDO ****************

sudo visudo // or: the same s bellow:
sudo vim /etc/sudoers

sudo cat /var/log/sudo/sudo.log


********* CRONTAB ************
//monitoring.sh
sudo visudo
your_username ALL=(ALL) NOPASSWD: /usr/local/bin/monitoring.sh
 under where its written %sudo ALL=(ALL:ALL) ALL
sudo crontab -u root -e
@reboot /bin/sh -c "sleep 20 && /full/path/to/your/script.shcao    
*/10 * * * * /usr/local/bin/monitoring.sh this means that every 10 mins, this script will show

*********** HOSTNAME *************

sudo hostnamectl set-hostname new_hostname
restart
sudo nano /etc/hosts // change new hostname

**************** SSH *********************

In case an error occurs, then type rm ~/.ssh/known_hosts in your iTerm and then retype ssh

************* BONUS *********************

****************** MARIADB ********************
mysql -u root -p
// WHEN in mysql shell: 
SHOW DATABASES
SELECT User, Host FROM mysql.user;

********* FAIL2BAN *************
sudo systemctl restart fail2ban
sudo fail2ban-client status ssh
sudo iptables -L -n
sudo tail -f /var/log/fail2ban.log


FAIL2BAN IS: a log-parsing application that scans log files for specific patterns of failed login attempts and temporarily bans the IP addresses responsible for these attempts. The ban can be either in the form of a firewall rule or by rejecting connections from the IP address. This helps to prevent brute-force attacks and protect the system from unauthorized access.